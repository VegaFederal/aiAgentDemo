name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
    
    - name: Run tests
      run: |
        if [ -f package.json ] && grep -q '"test"' package.json; then
          npm test
        else
          echo "No tests to run"
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
    
    - name: Lint code
      run: |
        if [ -f package.json ] && grep -q '"lint"' package.json; then
          npm run lint
        else
          echo "No lint script found, skipping"
        fi

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
    
    - name: Build
      run: |
        if [ -f package.json ] && grep -q '"build"' package.json; then
          npm run build
        else
          echo "No build script found, skipping"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          build/
          .serverless/
          .aws-sam/
          cdk.out/
        if-no-files-found: ignore

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to AWS
      run: |
        # Detect deployment type and run appropriate command
        if [ -f serverless.yml ]; then
          echo "Deploying with Serverless Framework"
          npm install -g serverless
          serverless deploy --stage dev
        elif [ -d infrastructure/cdk ]; then
          echo "Deploying with AWS CDK"
          cd infrastructure/cdk
          npm ci
          npm run build
          npm run cdk deploy -- --require-approval never
        elif [ -f infrastructure/cloudformation/template.yaml ]; then
          echo "Deploying with CloudFormation"
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/template.yaml \
            --stack-name ${GITHUB_REPOSITORY#*/}-dev \
            --parameter-overrides Environment=dev \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        elif [ -d infrastructure/terraform ]; then
          echo "Deploying with Terraform"
          cd infrastructure/terraform
          terraform init
          terraform apply -auto-approve -var="environment=dev"
        else
          echo "No deployment configuration found"
          exit 1
        fi

  deploy-prod:
    name: Deploy to Production
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Deploy to AWS
      id: deploy
      run: |
        # Detect deployment type and run appropriate command
        if [ -f serverless.yml ]; then
          echo "Deploying with Serverless Framework"
          npm install -g serverless
          serverless deploy --stage prod
        elif [ -d infrastructure/cdk ]; then
          echo "Deploying with AWS CDK"
          cd infrastructure/cdk
          npm ci
          npm run build
          npm run cdk deploy -- --require-approval never
        elif [ -f infrastructure/cloudformation/template.yaml ]; then
          echo "Deploying with CloudFormation"
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/template.yaml \
            --stack-name ${GITHUB_REPOSITORY#*/}-prod \
            --parameter-overrides Environment=prod \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        elif [ -d infrastructure/terraform ]; then
          echo "Deploying with Terraform"
          cd infrastructure/terraform
          terraform init
          terraform apply -auto-approve -var="environment=prod"
        else
          echo "No deployment configuration found"
          exit 1
        fi
        
        # Set output URL (this is just an example, adjust based on your actual deployment)
        echo "deployment-url=https://example.com" >> $GITHUB_OUTPUT