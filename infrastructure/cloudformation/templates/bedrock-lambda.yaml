AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda functions and resources for LLM agent with Titan Embeddings and Claude 3.5 Sonnet V2

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: The deployment environment
    
  DocumentsBucketName:
    Type: String
    Default: aiad-docs
    Description: Base name for the S3 bucket that will store documents
    
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code packages

Resources:
  # DynamoDB Table for Document Embeddings
  DocumentEmbeddingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub aiad-embeddings-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: document_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: DocumentIdIndex
          KeySchema:
            - AttributeName: document_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub aiad-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0
                  - !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0"
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt DocumentEmbeddingsTable.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DocumentsBucketName}-${Environment}
                  - !Sub arn:aws:s3:::${DocumentsBucketName}-${Environment}/*

  # Document Processor Lambda Function
  DocumentProcessorFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      FunctionName: !Sub aiad-doc-processor-${Environment}
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          EMBEDDINGS_TABLE: !Ref DocumentEmbeddingsTable
          EMBEDDING_MODEL_ID: amazon.titan-embed-text-v1
          CHUNK_SIZE: 1000
          CHUNK_OVERLAP: 200
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda/document-processor.zip

  # S3 Bucket for Document Storage
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${DocumentsBucketName}-${Environment}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda Permission for S3
  DocumentProcessorPermission:
    Type: AWS::Lambda::Permission
    DependsOn: DocumentProcessorFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DocumentProcessorFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${DocumentsBucketName}-${Environment}

  # Configure S3 Bucket Notifications using a Custom Resource
  ConfigureBucketNotifications:
    Type: Custom::S3BucketNotification
    DependsOn:
      - DocumentsBucket
      - DocumentProcessorFunction
      - DocumentProcessorPermission
    Properties:
      ServiceToken: !GetAtt NotificationConfigFunction.Arn
      BucketName: !Ref DocumentsBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt DocumentProcessorFunction.Arn

  # Custom Resource Lambda Function for S3 Bucket Notifications
  NotificationConfigFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt NotificationConfigRole.Arn
      Runtime: python3.11
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          s3 = boto3.client('s3')
          
          def handler(event, context):
              try:
                  print(f"Received event: {json.dumps(event)}")
                  
                  # Extract properties
                  props = event['ResourceProperties']
                  bucket_name = props['BucketName']
                  notification_config = props['NotificationConfiguration']
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print(f"Configuring notifications for bucket {bucket_name}")
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                  elif event['RequestType'] == 'Delete':
                      print(f"Removing notifications from bucket {bucket_name}")
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration={}
                      )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})

  # IAM Role for the Notification Config Lambda
  NotificationConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutBucketNotification
                  - s3:GetBucketNotification
                  - s3:PutBucketNotificationConfiguration
                  - s3:GetBucketNotificationConfiguration
                Resource: !Sub arn:aws:s3:::${DocumentsBucketName}-${Environment}

  # LLM Agent Lambda Function
  LlmAgentFunction:
    Type: AWS::Lambda::Function
    DependsOn: 
      - LambdaExecutionRole
      - DocumentEmbeddingsTable
    Properties:
      FunctionName: !Sub aiad-llm-agent-${Environment}
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          EMBEDDINGS_TABLE: !Ref DocumentEmbeddingsTable
          EMBEDDING_MODEL_ID: amazon.titan-embed-text-v1
          LLM_MODEL_ID: "arn:aws:bedrock:us-east-1:879961718230:inference-profile/us.anthropic.claude-3-5-sonnet-20241022-v2:0"
          SIMILARITY_THRESHOLD: 0.7
          MAX_CONTEXT_DOCS: 5
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda/llm-agent.zip

Outputs:
  DocumentsBucketName:
    Description: S3 Bucket for document storage
    Value: !Ref DocumentsBucket

  DocumentEmbeddingsTableName:
    Description: DynamoDB Table for document embeddings
    Value: !Ref DocumentEmbeddingsTable

  DocumentProcessorFunctionName:
    Description: Lambda function for document processing
    Value: !Ref DocumentProcessorFunction

  LlmAgentFunctionName:
    Description: Lambda function for LLM Agent
    Value: !Ref LlmAgentFunction
    
  LlmAgentFunctionArn:
    Description: ARN of the LLM Agent Lambda function
    Value: !GetAtt LlmAgentFunction.Arn