AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway and Lambda for document processing'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
    
  ProcessAllDocumentsFunctionName:
    Type: String
    Description: Name of the Lambda function to process all documents
    
  DocumentsBucketName:
    Type: String
    Description: Name of the S3 bucket that stores documents
    
  LambdaCodeBucket:
    Type: String
    Description: S3 bucket containing Lambda function code packages
    
  AIModel:
    Type: String
    Description: Bedrock AI model ID for embeddings
    
  EmbeddingsTable:
    Type: String
    Description: DynamoDB table name for embeddings

Resources:
  # API Gateway
  DocumentProcessingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${Environment}-document-processing-api
      Description: API for document processing
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Resource
  ProcessDocumentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DocumentProcessingApi
      ParentId: !GetAtt DocumentProcessingApi.RootResourceId
      PathPart: process-documents

  # API Method
  ProcessDocumentsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DocumentProcessingApi
      ResourceId: !Ref ProcessDocumentsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessAllDocumentsFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$')
        RequestTemplates:
          application/json: $input.json('$')
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProcessDocumentsMethod
    Properties:
      RestApiId: !Ref DocumentProcessingApi
      StageName: !Ref Environment

  # Lambda Function for processing all documents
  ProcessAllDocumentsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ProcessAllDocumentsFunctionName
      Handler: process_all_documents.lambda_handler
      Role: !GetAtt ProcessAllDocumentsRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: lambda/document-processor.zip
      Runtime: python3.11
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          EMBEDDINGS_TABLE: !Ref EmbeddingsTable
          EMBEDDING_MODEL_ID: !Ref AIModel

  # Lambda Permission for API Gateway
  ProcessAllDocumentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProcessAllDocumentsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DocumentProcessingApi}/*

  # IAM Role for Lambda
  ProcessAllDocumentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${DocumentsBucketName}
                  - !Sub arn:aws:s3:::${DocumentsBucketName}/*
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${EmbeddingsTable}
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${DocumentProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/process-documents
  
  ProcessAllDocumentsFunctionArn:
    Description: ARN of the process all documents Lambda function
    Value: !GetAtt ProcessAllDocumentsFunction.Arn